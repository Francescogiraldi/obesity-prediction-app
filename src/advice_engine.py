import pandas as pd
from typing import Dict, List, Any
import streamlit as st

class AdviceEngine:
    """Moteur de recommandations personnalis√©es pour la sant√©."""
    
    def __init__(self):
        self.advice_database = self._initialize_advice_database()
    
    def _initialize_advice_database(self) -> Dict[str, Dict[str, List[str]]]:
        """Initialise la base de donn√©es des conseils."""
        return {
            "nutrition": {
                "insuffisance_ponderale": [
                    "ü•ó Augmentez votre apport calorique avec des aliments nutritifs",
                    "ü•ú Consommez plus de prot√©ines (viandes maigres, l√©gumineuses, noix)",
                    "üçå Ajoutez des collations saines entre les repas",
                    "ü•õ Buvez des smoothies riches en calories et nutriments"
                ],
                "poids_normal": [
                    "ü•¨ Maintenez une alimentation √©quilibr√©e et vari√©e",
                    "üçé Consommez 5 portions de fruits et l√©gumes par jour",
                    "üêü Privil√©giez les prot√©ines maigres et les poissons gras",
                    "üíß Buvez suffisamment d'eau (1.5-2L par jour)"
                ],
                "surpoids": [
                    "ü•ó R√©duisez les portions et privil√©giez les l√©gumes",
                    "üö´ Limitez les aliments transform√©s et sucr√©s",
                    "üçΩÔ∏è Mangez lentement et √©coutez votre sati√©t√©",
                    "ü•§ Remplacez les boissons sucr√©es par de l'eau"
                ],
                "obesite": [
                    "üë®‚Äç‚öïÔ∏è Consultez un nutritionniste pour un plan personnalis√©",
                    "üìä Tenez un journal alimentaire pour identifier les habitudes",
                    "ü•¨ Remplissez la moiti√© de votre assiette avec des l√©gumes",
                    "‚è∞ Respectez des horaires de repas r√©guliers"
                ]
            },
            "activite_physique": {
                "insuffisance_ponderale": [
                    "üí™ Privil√©giez la musculation pour d√©velopper la masse musculaire",
                    "üèÉ‚Äç‚ôÇÔ∏è Commencez par 20-30 minutes d'exercice mod√©r√©",
                    "üßò‚Äç‚ôÄÔ∏è Int√©grez des exercices de renforcement et d'√©tirement"
                ],
                "poids_normal": [
                    "üèÉ‚Äç‚ôÇÔ∏è Maintenez 150 minutes d'activit√© mod√©r√©e par semaine",
                    "üí™ Ajoutez 2 s√©ances de renforcement musculaire",
                    "üö∂‚Äç‚ôÄÔ∏è Int√©grez plus de marche dans votre quotidien"
                ],
                "surpoids": [
                    "üèÉ‚Äç‚ôÇÔ∏è Augmentez progressivement votre activit√© physique",
                    "üö¥‚Äç‚ôÄÔ∏è Privil√©giez les activit√©s cardio (v√©lo, natation, marche)",
                    "‚è∞ Visez 45-60 minutes d'exercice 5 fois par semaine"
                ],
                "obesite": [
                    "üë®‚Äç‚öïÔ∏è Consultez un m√©decin avant de commencer un programme",
                    "üö∂‚Äç‚ôÄÔ∏è Commencez par la marche quotidienne (10-15 minutes)",
                    "üèä‚Äç‚ôÄÔ∏è Privil√©giez les activit√©s √† faible impact (natation, aquagym)"
                ]
            },
            "mode_de_vie": {
                "general": [
                    "üò¥ Dormez 7-9 heures par nuit pour r√©guler les hormones",
                    "üßò‚Äç‚ôÄÔ∏è Pratiquez la gestion du stress (m√©ditation, yoga)",
                    "üì± Limitez le temps d'√©cran, surtout avant le coucher",
                    "üë• Entourez-vous de soutien social pour vos objectifs sant√©"
                ]
            }
        }
    
    def get_personalized_advice(self, prediction: int, user_inputs: Dict[str, Any]) -> Dict[str, List[str]]:
        """G√©n√®re des conseils personnalis√©s bas√©s sur la pr√©diction et les inputs utilisateur."""
        # D√©terminer la cat√©gorie de poids
        weight_category = self._get_weight_category(prediction)
        
        advice = {
            "nutrition": self.advice_database["nutrition"].get(weight_category, []),
            "activite_physique": self.advice_database["activite_physique"].get(weight_category, []),
            "mode_de_vie": self.advice_database["mode_de_vie"]["general"]
        }
        
        # Ajouter des conseils sp√©cifiques bas√©s sur les inputs
        advice = self._add_specific_advice(advice, user_inputs, weight_category)
        
        return advice
    
    def _get_weight_category(self, prediction: int) -> str:
        """Convertit la pr√©diction en cat√©gorie de poids."""
        if prediction == 0:
            return "insuffisance_ponderale"
        elif prediction == 1:
            return "poids_normal"
        elif prediction in [2, 3]:
            return "surpoids"
        else:
            return "obesite"
    
    def _add_specific_advice(self, advice: Dict[str, List[str]], 
                           user_inputs: Dict[str, Any], 
                           weight_category: str) -> Dict[str, List[str]]:
        """Ajoute des conseils sp√©cifiques bas√©s sur les habitudes de l'utilisateur."""
        
        # Conseils bas√©s sur la consommation de l√©gumes
        if user_inputs.get('consommation_legumes', 0) < 2:
            advice["nutrition"].append("ü•ï Augmentez votre consommation de l√©gumes √† chaque repas")
        
        # Conseils bas√©s sur l'activit√© physique
        if user_inputs.get('frequence_activite_physique', 0) < 2:
            advice["activite_physique"].append("üèÉ‚Äç‚ôÇÔ∏è Augmentez progressivement votre activit√© physique")
        
        # Conseils bas√©s sur la consommation d'eau
        if user_inputs.get('consommation_eau', 0) < 2:
            advice["mode_de_vie"].append("üíß Buvez plus d'eau tout au long de la journ√©e")
        
        # Conseils bas√©s sur le grignotage
        if user_inputs.get('grignotage') == 'Toujours':
            advice["nutrition"].append("üö´ Remplacez le grignotage par des collations saines (fruits, noix)")
        
        # Conseils bas√©s sur le stress
        if user_inputs.get('stress', 0) > 2:
            advice["mode_de_vie"].append("üßò‚Äç‚ôÄÔ∏è Pratiquez des techniques de relaxation pour g√©rer le stress")
        
        # Conseils bas√©s sur le temps pass√© sur la technologie
        if user_inputs.get('temps_technologie', 0) > 2:
            advice["mode_de_vie"].append("üì± R√©duisez le temps d'√©cran et augmentez l'activit√© physique")
        
        # Conseils bas√©s sur le transport
        if user_inputs.get('transport') in ['Automobile', 'Transport_Public']:
            advice["activite_physique"].append("üö∂‚Äç‚ôÄÔ∏è Int√©grez plus de marche ou de v√©lo dans vos d√©placements")
        
        return advice
    
    def get_risk_factors(self, user_inputs: Dict[str, Any]) -> List[str]:
        """Identifie les facteurs de risque principaux."""
        risk_factors = []
        
        # IMC
        bmi = user_inputs['poids_kg'] / (user_inputs['taille_m'] ** 2)
        if bmi >= 30:
            risk_factors.append("IMC √©lev√© (‚â•30)")
        elif bmi >= 25:
            risk_factors.append("Surpoids (IMC 25-30)")
        
        # Ant√©c√©dents familiaux
        if user_inputs.get('antecedents_familiaux') == 'Oui':
            risk_factors.append("Ant√©c√©dents familiaux d'ob√©sit√©")
        
        # Mode de vie s√©dentaire
        if user_inputs.get('frequence_activite_physique', 0) < 1:
            risk_factors.append("Mode de vie s√©dentaire")
        
        # Mauvaises habitudes alimentaires
        if user_inputs.get('grignotage') == 'Toujours':
            risk_factors.append("Grignotage fr√©quent")
        
        if user_inputs.get('consommation_legumes', 0) < 1:
            risk_factors.append("Faible consommation de l√©gumes")
        
        # Stress √©lev√©
        if user_inputs.get('stress', 0) > 2:
            risk_factors.append("Niveau de stress √©lev√©")
        
        return risk_factors
    
    def get_protective_factors(self, user_inputs: Dict[str, Any]) -> List[str]:
        """Identifie les facteurs protecteurs."""
        protective_factors = []
        
        # Activit√© physique r√©guli√®re
        if user_inputs.get('frequence_activite_physique', 0) >= 3:
            protective_factors.append("Activit√© physique r√©guli√®re")
        
        # Bonne alimentation
        if user_inputs.get('consommation_legumes', 0) >= 3:
            protective_factors.append("Consommation √©lev√©e de l√©gumes")
        
        if user_inputs.get('consommation_eau', 0) >= 2:
            protective_factors.append("Hydratation ad√©quate")
        
        # Surveillance du poids
        if user_inputs.get('surveillance_calories') == 'Oui':
            protective_factors.append("Surveillance des calories")
        
        # Non-fumeur
        if user_inputs.get('fumeur') == 'Non':
            protective_factors.append("Non-fumeur")
        
        # Transport actif
        if user_inputs.get('transport') in ['Marche', 'V√©lo']:
            protective_factors.append("Transport actif")
        
        return protective_factors