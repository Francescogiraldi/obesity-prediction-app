import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from typing import Dict, List, Any
import shap
import matplotlib.pyplot as plt
from PIL import Image
import io
import base64

def create_gauge_chart(value: float, title: str, color: str) -> go.Figure:
    """Cr√©e un graphique en jauge pour afficher une m√©trique."""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = value,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': title, 'font': {'size': 20}},
        gauge = {
            'axis': {'range': [None, 100]},
            'bar': {'color': color},
            'steps': [
                {'range': [0, 25], 'color': "lightgray"},
                {'range': [25, 50], 'color': "gray"},
                {'range': [50, 75], 'color': "lightblue"},
                {'range': [75, 100], 'color': "blue"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 90
            }
        }
    ))
    
    fig.update_layout(
        height=300,
        margin=dict(l=20, r=20, t=40, b=20),
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)"
    )
    
    return fig

def create_bmi_indicator(bmi: float) -> go.Figure:
    """Cr√©e un indicateur visuel pour l'IMC."""
    # D√©terminer la couleur bas√©e sur l'IMC
    if bmi < 18.5:
        color = "#4CAF50"
        category = "Insuffisance pond√©rale"
    elif bmi < 25:
        color = "#8BC34A"
        category = "Poids normal"
    elif bmi < 30:
        color = "#FFC107"
        category = "Surpoids"
    else:
        color = "#F44336"
        category = "Ob√©sit√©"
    
    fig = go.Figure(go.Indicator(
        mode = "gauge+number",
        value = bmi,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': f"IMC: {category}", 'font': {'size': 18}},
        number = {'suffix': " kg/m¬≤", 'font': {'size': 24}},
        gauge = {
            'axis': {'range': [15, 40], 'tickwidth': 1},
            'bar': {'color': color, 'thickness': 0.3},
            'steps': [
                {'range': [15, 18.5], 'color': "#E3F2FD"},
                {'range': [18.5, 25], 'color': "#C8E6C9"},
                {'range': [25, 30], 'color': "#FFF3E0"},
                {'range': [30, 40], 'color': "#FFEBEE"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': bmi
            }
        }
    ))
    
    fig.update_layout(
        height=250,
        margin=dict(l=20, r=20, t=40, b=20),
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)"
    )
    
    return fig

def create_prediction_chart(probabilities: np.ndarray, labels: Dict[int, str]) -> go.Figure:
    """Cr√©e un graphique en barres pour les probabilit√©s de pr√©diction."""
    df = pd.DataFrame({
        'Cat√©gorie': [labels[i] for i in range(len(probabilities))],
        'Probabilit√©': probabilities * 100
    })
    
    # Trier par probabilit√© d√©croissante
    df = df.sort_values('Probabilit√©', ascending=True)
    
    # Couleurs d√©grad√©es
    colors = px.colors.sequential.Reds_r
    
    fig = go.Figure(data=[
        go.Bar(
            y=df['Cat√©gorie'],
            x=df['Probabilit√©'],
            orientation='h',
            marker=dict(
                color=df['Probabilit√©'],
                colorscale='RdYlGn_r',
                showscale=False
            ),
            text=[f"{p:.1f}%" for p in df['Probabilit√©']],
            textposition='auto'
        )
    ])
    
    fig.update_layout(
        title="Probabilit√©s de classification",
        xaxis_title="Probabilit√© (%)",
        yaxis_title="Cat√©gorie d'ob√©sit√©",
        height=400,
        margin=dict(l=20, r=20, t=40, b=20),
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)"
    )
    
    return fig

def display_shap_explanation(model, input_data: pd.DataFrame, feature_names: List[str]):
    """Affiche l'explication SHAP pour la pr√©diction."""
    try:
        # Cr√©er l'explainer SHAP
        explainer = shap.Explainer(model)
        shap_values = explainer(input_data)
        
        # Cr√©er le graphique SHAP
        fig, ax = plt.subplots(figsize=(10, 6))
        shap.plots.waterfall(shap_values[0], max_display=10, show=False)
        
        # Convertir en image pour Streamlit
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight', dpi=150)
        buf.seek(0)
        
        st.image(buf, caption="Explication SHAP - Impact des caract√©ristiques sur la pr√©diction")
        plt.close()
        
    except Exception as e:
        st.warning(f"Impossible d'afficher l'explication SHAP: {e}")
        # Afficher l'image SHAP pr√©-g√©n√©r√©e si disponible
        try:
            shap_image = Image.open("assets/shap_summary_named.png")
            st.image(shap_image, caption="Importance des caract√©ristiques (SHAP)")
        except:
            st.info("Explication SHAP non disponible")

def create_risk_assessment_card(risk_factors: List[str], protective_factors: List[str]):
    """Cr√©e une carte d'√©valuation des risques."""
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üö® Facteurs de risque")
        if risk_factors:
            for factor in risk_factors:
                st.markdown(f"‚Ä¢ {factor}")
        else:
            st.markdown("‚úÖ Aucun facteur de risque majeur identifi√©")
    
    with col2:
        st.markdown("### üõ°Ô∏è Facteurs protecteurs")
        if protective_factors:
            for factor in protective_factors:
                st.markdown(f"‚Ä¢ {factor}")
        else:
            st.markdown("‚ö†Ô∏è Peu de facteurs protecteurs identifi√©s")

def create_advice_cards(advice: Dict[str, List[str]]):
    """Cr√©e des cartes de conseils organis√©es par cat√©gorie."""
    tabs = st.tabs(["ü•ó Nutrition", "üèÉ‚Äç‚ôÇÔ∏è Activit√© Physique", "üåü Mode de Vie"])
    
    categories = ["nutrition", "activite_physique", "mode_de_vie"]
    
    for i, (tab, category) in enumerate(zip(tabs, categories)):
        with tab:
            if category in advice and advice[category]:
                for tip in advice[category]:
                    st.markdown(f"**{tip}**")
                    st.markdown("---")
            else:
                st.info("Aucun conseil sp√©cifique pour cette cat√©gorie")

def create_progress_tracker():
    """Cr√©e un tracker de progression (placeholder pour futures fonctionnalit√©s)."""
    st.markdown("### üìà Suivi de progression")
    st.info("Fonctionnalit√© de suivi √† venir - enregistrez vos mesures r√©guli√®rement!")
    
    # Placeholder pour un graphique de progression
    dates = pd.date_range('2024-01-01', periods=10, freq='W')
    weights = np.random.normal(70, 2, 10)  # Donn√©es d'exemple
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=dates,
        y=weights,
        mode='lines+markers',
        name='Poids (kg)',
        line=dict(color='#FF6B6B', width=3)
    ))
    
    fig.update_layout(
        title="√âvolution du poids (exemple)",
        xaxis_title="Date",
        yaxis_title="Poids (kg)",
        height=300,
        margin=dict(l=20, r=20, t=40, b=20)
    )
    
    st.plotly_chart(fig, use_container_width=True)

def display_model_info():
    """Affiche les informations sur le mod√®le."""
    with st.expander("‚ÑπÔ∏è √Ä propos du mod√®le"):
        st.markdown("""
        **Mod√®le utilis√©:** LightGBM avec pipeline de pr√©processing
        
        **Caract√©ristiques du mod√®le:**
        - Algorithme: LightGBM (Gradient Boosting)
        - Pr√©processing: StandardScaler + OneHotEncoder
        - √âquilibrage: SMOTE pour g√©rer les classes d√©s√©quilibr√©es
        - Explicabilit√©: Int√©gration SHAP pour l'interpr√©tation
        
        **Performance:**
        - Entra√Æn√© sur un dataset de 20,000+ √©chantillons
        - Validation crois√©e stratifi√©e
        - M√©triques d'√©valuation disponibles via MLflow
        
        **Avertissement:**
        Cette application est √† des fins √©ducatives et ne remplace pas un avis m√©dical professionnel.
        """)

def create_input_form() -> Dict[str, Any]:
    """Cr√©e le formulaire de saisie des donn√©es utilisateur."""
    st.markdown("### üìù Vos informations")
    
    # Informations de base
    col1, col2 = st.columns(2)
    
    with col1:
        genre = st.selectbox("Genre", ["Femme", "Homme"])
        age = st.number_input("√Çge", min_value=10, max_value=100, value=30)
        taille_m = st.number_input("Taille (m)", min_value=1.0, max_value=2.5, value=1.70, step=0.01)
        poids_kg = st.number_input("Poids (kg)", min_value=30.0, max_value=300.0, value=70.0, step=0.1)
    
    with col2:
        antecedents_familiaux = st.selectbox("Ant√©c√©dents familiaux d'ob√©sit√©", ["Non", "Oui"])
        fumeur = st.selectbox("Fumeur", ["Non", "Oui"])
        surveillance_calories = st.selectbox("Surveillez-vous vos calories?", ["Non", "Oui"])
    
    # Habitudes alimentaires
    st.markdown("#### üçΩÔ∏è Habitudes alimentaires")
    col3, col4 = st.columns(2)
    
    with col3:
        consommation_legumes = st.slider("Consommation de l√©gumes (portions/jour)", 0, 5, 2)
        nombre_repas_principaux = st.slider("Nombre de repas principaux/jour", 1, 5, 3)
        consommation_eau = st.slider("Consommation d'eau (L/jour)", 0, 5, 2)
    
    with col4:
        grignotage = st.selectbox("Fr√©quence de grignotage", ["Jamais", "Parfois", "Souvent", "Toujours"])
        alcool = st.selectbox("Consommation d'alcool", ["Jamais", "Parfois", "Souvent", "Toujours"])
    
    # Mode de vie
    st.markdown("#### üèÉ‚Äç‚ôÇÔ∏è Mode de vie")
    col5, col6 = st.columns(2)
    
    with col5:
        frequence_activite_physique = st.slider("Fr√©quence d'activit√© physique (jours/semaine)", 0, 7, 2)
        temps_technologie = st.slider("Temps pass√© sur la technologie (heures/jour)", 0, 12, 4)
    
    with col6:
        transport = st.selectbox("Mode de transport principal", 
                                ["Marche", "V√©lo", "Transport_Public", "Automobile"])
    
    return {
        'genre': genre,
        'age': age,
        'taille_m': taille_m,
        'poids_kg': poids_kg,
        'antecedents_familiaux': antecedents_familiaux,
        'consommation_legumes': consommation_legumes,
        'nombre_repas_principaux': nombre_repas_principaux,
        'grignotage': grignotage,
        'fumeur': fumeur,
        'consommation_eau': consommation_eau,
        'surveillance_calories': surveillance_calories,
        'frequence_activite_physique': frequence_activite_physique,
        'temps_technologie': temps_technologie,
        'alcool': alcool,
        'transport': transport
    }